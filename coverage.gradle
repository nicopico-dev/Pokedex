apply plugin: 'jacoco'

// See https://medium.com/@fraggjkee/measuring-unit-test-coverage-in-multi-module-android-projects-using-jacoco-113d201ccb79

jacoco {
    toolVersion = '0.8.5'
}

project.ext {
    jacocoCoverageThresholdDefault = 0.60

    jacocoIgnoreList = [
            'tests'
    ]

    // Exclude file by names, packages or types.
    // These files will be ignored during test coverage calculation
    jacocoFileFilter = [
            '**/*App.*',
            '**/*Application.*',
            '**/*Activity.*',
            '**/*Fragment.*',
            '**/*View.*',
            '**/*ViewGroup.*',
            '**/*JsonAdapter.*',
            '**/di/**',
            '**/*Dagger.*'
    ]

    jacocoReportConfigAndroid = {
        def coverageSourceDirs = [
                "$projectDir/src/main/java",
                "$projectDir/src/main/kotlin"
        ]
        def debugTree = fileTree(
                dir: "$buildDir/tmp/kotlin-classes/debug",
                excludes: jacocoFileFilter
        )
        sourceDirectories.from = files(coverageSourceDirs)
        classDirectories.from = files([debugTree])
        executionData.from = fileTree(
                dir: project.buildDir,
                includes: [
                        'jacoco/testDebugUnitTest.exec',
                        'outputs/code-coverage/connected/*coverage.ec'
                ]
        )
    }
}

if (!jacocoIgnoreList.contains(project.name)) {
    tasks.register('testExistenceValidation', TestExistenceValidation)

    configureCoverageReport()
    configureCoverageVerification()
}

private def configureCoverageReport() {
    if (isAndroidModule(project)) {
        task jacocoTestReport(
                type: JacocoReport,
                dependsOn: [ 'testExistenceValidation', 'testDebugUnitTest' ]
        ) {
            configure jacocoReportConfigAndroid
        }
    } else if (isKotlinModule(project)) {
        jacocoTestReport {
            dependsOn testExistenceValidation
            dependsOn test
        }
    } else {
        return
    }

    // Common configurations
    jacocoTestReport {
        reports {
            csv.enabled false
            xml.enabled false
            html {
                enabled true
                destination file("${buildDir}/coverage-report")
            }
        }
    }
}

private def configureCoverageVerification() {
    if (isAndroidModule(project)) {
        task jacocoTestCoverageVerification(
                type: JacocoCoverageVerification,
                dependsOn: [ 'testExistenceValidation', 'testDebugUnitTest' ]
        )
    } else if (isKotlinModule(project)) {
        jacocoTestCoverageVerification {
            dependsOn testExistenceValidation
            dependsOn test
        }
    } else {
        return
    }

    def threshold = project.hasProperty('jacocoCoverageThreshold')
            ? project.jacocoCoverageThreshold
            : project.jacocoCoverageThresholdDefault

    // Common configuration
    jacocoTestCoverageVerification {
        violationRules {
            rule {
                limit {
                    minimum = threshold
                }
            }
        }
    }
}

class TestExistenceValidation extends DefaultTask {
    static final SRC_DIR = 'src'
    static final TEST_DIRS = ['test', 'androidTest']
    static final CODE_DIRS = ['java', 'kotlin']

    @TaskAction
    void execute() {
        File srcDir = new File(project.projectDir, SRC_DIR)

        FileFilter directoryFilter = { it.isDirectory() }
        File[] subDirs = srcDir.listFiles(directoryFilter) ?: []

        File testsDir = subDirs.find { TEST_DIRS.contains(it.name) }

        if (testsDir) {
            File javaTestsDir = testsDir
                    .listFiles(directoryFilter)
                    .find { CODE_DIRS.contains(it.name) }
            if (javaTestsDir && javaTestsDir.list().length > 0) {
                return
            }
        }
        throw new GradleException("${project.name} has no unit tests.")
    }
}
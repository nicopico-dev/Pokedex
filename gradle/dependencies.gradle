repositories {
    google()
    mavenCentral()
    maven { url 'https://dl.bintray.com/sargunv/maven' }
}

ext {
    fragment_version = '1.2.5'
    koin_version= '2.2.2'
    kotlinCoroutines_version = '1.4.1'
    lifecycle_version = '2.2.0'
    moshi_version = '1.12.0'
    okhttp_version = '4.9.0'
    retrofit_version = '2.9.0'

    mods = [
            base: [
                    usecase: project(":modules:base:usecase"),
                    tests: project(":modules:base:tests"),
            ],
            core: [
                    api: project(":modules:core:api"),
                    domain: project(":modules:core:domain"),
                    resources: project(":modules:core:resources"),
            ],
            feature: [
                    pokemonList: project(':modules:feature:pokemon-list')
            ]
    ]


    build = [
            compileSdk: 30,
            buildTools: '30.0.3',
            minSdk    : 23,
            targetSdk : 29,
    ]

    deps = [
            kotlin: [
                    reflect: "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version",
                    stdlib: "org.jetbrains.kotlin:kotlin-stdlib:_",
                    coroutines: "org.jetbrains.kotlinx:kotlinx-coroutines-core:_",
            ],

            android: [
                    activityKtx: 'androidx.activity:activity-ktx:1.1.0',
                    appCompat: 'androidx.appcompat:appcompat:_',
                    cardView: 'androidx.cardview:cardview:_',
                    coreKtx: 'androidx.core:core-ktx:_',
                    constraintLayout: 'androidx.constraintlayout:constraintlayout:1.1.3',
                    coroutines: "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlinCoroutines_version",
                    fragmentKtx: "androidx.fragment:fragment-ktx:_",
                    lifecycleLiveDataKtx: "androidx.lifecycle:lifecycle-livedata-ktx:_",
                    lifecycleViewModelKtx: "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version",
                    lifecycleViewModelSavedState: "androidx.lifecycle:lifecycle-viewmodel-savedstate:$lifecycle_version",
                    recyclerView: 'androidx.recyclerview:recyclerview:_',
                    recyclerViewSelection: 'androidx.recyclerview:recyclerview-selection:_',
            ],

            koin: [
                    core: "io.insert-koin:koin-core:_",
                    coreExt: "io.insert-koin:koin-core-ext:$koin_version",
                    androidScope: "io.insert-koin:koin-androidx-scope:$koin_version",
                    androidViewModel: "io.insert-koin:koin-androidx-viewmodel:_",
            ],

            media: [
                    coil: 'io.coil-kt:coil:_',
            ],

            network: [
                    moshi: "com.squareup.moshi:moshi-kotlin:_",
                    okhttp3: "com.squareup.okhttp3:okhttp:_",
                    retrofit2: "com.squareup.retrofit2:retrofit:_",
                    retrofit2_moshi: "com.squareup.retrofit2:converter-moshi:_",
            ],
    ]

    kapt = [
            moshi: "com.squareup.moshi:moshi-kotlin-codegen:_",
    ]

    testDeps = [
            android: [
                    core: 'androidx.test:core:1.2.0',
                    espresso: 'androidx.test.espresso:espresso-core:_',
                    junitExt: 'androidx.test.ext:junit:_',
                    robolectric: 'org.robolectric:robolectric:_',
            ],

            kotlin: [
                    coroutines: "org.jetbrains.kotlinx:kotlinx-coroutines-test:_",
            ],

            junit: 'junit:junit:_',
            mockk: 'io.mockk:mockk:_',
            mockWebServer: "com.squareup.okhttp3:mockwebserver:_",
            truth: 'com.google.truth:truth:_',

            koin: "io.insert-koin:koin-test:_",
    ]
}

// https://docs.gradle.org/current/dsl/org.gradle.api.artifacts.ResolutionStrategy.html
configurations.all {
    resolutionStrategy {
        // kotlin-reflect is a transitive dependency on several direct dependencies
        //  force the version here to avoid adding the dependency directly everywhere
        force deps.kotlin.reflect

        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            def requested = details.requested
            if (requested.group == 'org.jetbrains.kotlin') {
                details.useVersion kotlin_version
            }
        }
    }
}
